#include <stdio.h>
#include <xstring>
#include "utilities.h"
#include "hvexpansion.h"
//#include "XexLoadImage.h"
using namespace std;

// disable QWORD to DWORD truncation warnings
#pragma warning(disable : 4244)
// disable PVOID to QWORD conversion warnings
#pragma warning(disable : 4826)

BYTE ExpansionData[] = {
	0x48, 0x58, 0x50, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x30, 0xD6, 0x99, 0xA5, 0x2B,
	0xC1, 0x35, 0x53, 0xDF, 0xB9, 0x89, 0x89, 0xEF, 0x37, 0xF3, 0xC9, 0x41, 0xD0, 0x79, 0xE3, 0xBA,
	0x3B, 0xA1, 0xEE, 0x5B, 0x1B, 0x0C, 0xEA, 0x92, 0x05, 0x41, 0x96, 0xCA, 0x8A, 0x85, 0xC0, 0x84,
	0xFC, 0xAB, 0x74, 0x25, 0x4F, 0xBE, 0x9C, 0x5C, 0xCD, 0xFC, 0xA5, 0xD4, 0x12, 0x35, 0xF9, 0xA0,
	0xCF, 0xB4, 0x46, 0x70, 0x97, 0x87, 0x08, 0xC1, 0xF1, 0x71, 0x85, 0x19, 0x95, 0xD3, 0x12, 0xE6,
	0x63, 0x19, 0x1D, 0xB5, 0x9D, 0x45, 0x15, 0xA1, 0xE4, 0xDF, 0x3D, 0x59, 0x5B, 0x28, 0x53, 0x20,
	0x16, 0xC6, 0x55, 0xF3, 0xD7, 0xD7, 0x20, 0x47, 0x32, 0x80, 0xD0, 0x27, 0xEC, 0x51, 0x8D, 0x70,
	0xD0, 0x72, 0x63, 0x6B, 0x08, 0xDB, 0xC3, 0x77, 0x85, 0xC3, 0x2D, 0x0B, 0x5F, 0xD0, 0xAE, 0xED,
	0xC9, 0xC5, 0xC8, 0x8A, 0xDB, 0x21, 0x2C, 0xF2, 0xF4, 0x31, 0x34, 0xCF, 0x4D, 0x10, 0x8A, 0x8D,
	0xE7, 0x6D, 0xE8, 0x97, 0xC0, 0x1C, 0x16, 0xD8, 0xE4, 0xFF, 0x5D, 0x5A, 0x4C, 0xBA, 0x65, 0x14,
	0x9F, 0x6B, 0xEE, 0x83, 0x89, 0xD1, 0xB6, 0x8D, 0x9D, 0x1C, 0x1F, 0x6B, 0xBE, 0x29, 0xC6, 0x96,
	0x58, 0xE6, 0x22, 0x9C, 0xE9, 0xFC, 0x9A, 0xC2, 0xF4, 0xF0, 0x51, 0x93, 0xC5, 0xA5, 0x79, 0xCB,
	0x99, 0xE2, 0xC6, 0x6C, 0x64, 0x08, 0x1A, 0xA1, 0xA7, 0x80, 0x7F, 0x1F, 0x28, 0x02, 0x09, 0xD2,
	0x0A, 0x67, 0xDD, 0xD2, 0xD6, 0x97, 0x50, 0x3C, 0x20, 0x61, 0x80, 0x0B, 0xFD, 0x47, 0x92, 0x41,
	0xBF, 0xA6, 0xAA, 0x10, 0xB4, 0x5C, 0xFF, 0x57, 0x49, 0x90, 0x9E, 0x5F, 0xC1, 0x35, 0xB8, 0xDA,
	0xB6, 0x00, 0xD7, 0x85, 0x35, 0x46, 0x29, 0x26, 0x75, 0xCB, 0x74, 0xFD, 0x03, 0xFF, 0x6E, 0x17,
	0x60, 0x4A, 0xC9, 0x8B, 0xAF, 0x9B, 0x8F, 0x3B, 0x54, 0x2D, 0x0A, 0x3A, 0x68, 0x61, 0xAA, 0x54,
	0x87, 0xB5, 0x5A, 0xD0, 0x99, 0xBE, 0x60, 0xED, 0x84, 0x61, 0x72, 0x50, 0xE6, 0xAB, 0x53, 0x8C,
	0x16, 0x64, 0x2E, 0xA9, 0x6D, 0x9B, 0x1E, 0xA5, 0x48, 0x11, 0xBF, 0x0F, 0x69, 0x55, 0xE7, 0xA3,
	0x4D, 0xA8, 0x9C, 0xC8, 0x82, 0x28, 0xA9, 0x77, 0x8B, 0xFD, 0x43, 0x75, 0xF6, 0x3C, 0x8E, 0xFB,
	0xD4, 0x0E, 0x9F, 0x7E, 0x76, 0xA2, 0x1B, 0x5C, 0x02, 0xC6, 0x84, 0xB8, 0x1C, 0x18, 0xDC, 0x0D,
	0x72, 0x86, 0x4E, 0xA4, 0x95, 0xBF, 0xDD, 0xD0, 0xB6, 0x30, 0xCE, 0x41, 0x4B, 0x1C, 0x04, 0xBF,
	0x95, 0x00, 0xAC, 0x47, 0x2F, 0x90, 0x83, 0x64, 0x0E, 0x84, 0x69, 0x33, 0x41, 0xEC, 0xC4, 0x84,
	0xCF, 0x4A, 0xDC, 0x5D, 0x56, 0x63, 0x94, 0xA0, 0x26, 0xBA, 0x08, 0xBE, 0x6B, 0xB3, 0x4A, 0x05,
	0xB7, 0xCC, 0x27, 0x6B, 0xF6, 0xB9, 0xE4, 0x89, 0xD6, 0xF1, 0x2E, 0x5E, 0x0F, 0xCC, 0x0D, 0x06,
	0x7D, 0xA6, 0x44, 0x13, 0xB5, 0x8A, 0xDD, 0x63, 0x58, 0xF5, 0xBB, 0x5A, 0x7E, 0x5B, 0x59, 0x3E,
	0xCC, 0xD2, 0x88, 0x94, 0x51, 0x12, 0x6A, 0x59, 0x45, 0x87, 0x61, 0x7B, 0xB0, 0xEA, 0x14, 0xA0,
	0x12, 0x83, 0x03, 0x78, 0xBB, 0x34, 0x27, 0xAA, 0x79, 0x7C, 0x25, 0x23, 0x58, 0x88, 0x7A, 0x04,
	0xC3, 0xFC, 0x42, 0x9F, 0x6C, 0x0E, 0x26, 0x17, 0x5B, 0x2E, 0xA3, 0x21, 0xD6, 0xB7, 0x7A, 0xC2,
	0x86, 0x7F, 0x24, 0x2D, 0x3B, 0x4D, 0xD6, 0xF0, 0x1C, 0xAE, 0xFF, 0x43, 0x2A, 0x16, 0x68, 0x16,
	0x13, 0x40, 0xCF, 0x77, 0x48, 0xC5, 0x09, 0xB6, 0x27, 0x82, 0x60, 0xCE, 0x33, 0xF1, 0xB0, 0xAF,
	0xD9, 0xC0, 0xB6, 0x80, 0xE7, 0x9D, 0x68, 0x32, 0xE1, 0x91, 0x3D, 0x2D, 0xE9, 0xB9, 0xCC, 0xA5,
	0x26, 0x85, 0xCB, 0xC3, 0x45, 0xD9, 0x43, 0x12, 0xC7, 0x6A, 0x23, 0xA9, 0x81, 0xF4, 0x14, 0xAF,
	0x4B, 0x42, 0x55, 0xC6, 0x6C, 0x2A, 0xD6, 0x25, 0x9D, 0xD9, 0x3A, 0xB8, 0x0B, 0x20, 0x26, 0x82,
	0x28, 0xA7, 0x46, 0x47, 0x0F, 0xE6, 0x5A, 0xB1, 0x19, 0x5F, 0xE4, 0xE7, 0xA0, 0xD7, 0x34, 0x96,
	0x1F, 0x27, 0xC9, 0xAD, 0x52, 0xCF, 0x59, 0x9D, 0x03, 0x32, 0xA3, 0xE8, 0x87, 0xA5, 0xFE, 0x3B,
	0xE7, 0xE5, 0x92, 0xD9, 0xC4, 0x55, 0x12, 0x1C, 0x15, 0x9B, 0x18, 0x6F, 0x0F, 0x3F, 0x06, 0x4A,
	0x21, 0x47, 0x40, 0x99, 0x28, 0xF6, 0x29, 0xF3, 0x73, 0xF9, 0x31, 0x4D, 0xD7, 0xA3, 0x8C, 0xD7,
	0x50, 0x9E, 0x8B, 0x7C, 0x2F, 0x10, 0xC9, 0x0A, 0xA2, 0x6F, 0x46, 0x77, 0xDA, 0x46, 0xBD, 0x36,
	0xEE, 0x11, 0xE3, 0x81, 0x43, 0x27, 0x9F, 0xAA, 0x5F, 0x9D, 0x5E, 0x8F, 0x08, 0x91, 0x02, 0x7A,
	0xCD, 0xD2, 0x23, 0x52, 0x69, 0x72, 0x3F, 0x58, 0x5C, 0x86, 0xDF, 0x6C, 0x9A, 0x55, 0x96, 0xEB,
	0x1F, 0x93, 0x6A, 0x93, 0x21, 0x1A, 0xD8, 0xE6, 0x60, 0xAB, 0xA2, 0x6F, 0x92, 0x3B, 0x55, 0x92,
	0x45, 0xF0, 0xA9, 0xA9, 0x1B, 0x49, 0x75, 0xAC, 0x6D, 0x84, 0x9D, 0x9F, 0xA8, 0x44, 0x51, 0x25,
	0xCE, 0x2E, 0x28, 0x2F, 0xFF, 0x81, 0x5A, 0x91, 0x68, 0x9E, 0xCD, 0xC1, 0xC0, 0x3B, 0x3D, 0x78,
	0x7A, 0xF1, 0xD7, 0xDA, 0x42, 0x5D, 0x49, 0xFE, 0xD1, 0x29, 0x71, 0xCA, 0x6C, 0xA6, 0x8F, 0xE8,
	0x2B, 0xDD, 0x61, 0xF9, 0x1F, 0x80, 0xBC, 0x45, 0x28, 0x0C, 0x42, 0x3A, 0x2F, 0xD1, 0xED, 0x30,
	0xCC, 0x1C, 0x79, 0x2F, 0xEE, 0xBF, 0x29, 0x15, 0x38, 0xB9, 0xF4, 0x67, 0xFB, 0xF0, 0x93, 0x05,
	0x13, 0xE4, 0x1F, 0xD0, 0x58, 0x58, 0x0C, 0x64, 0x88, 0xA6, 0xFA, 0x1C, 0xAA, 0x30, 0x50, 0x94,
	0xA0, 0xD3, 0xD6, 0x3E, 0xFD, 0x2F, 0x4F, 0x09, 0xAE, 0x55, 0x09, 0x2A, 0xB8, 0xF5, 0x73, 0x98,
	0xAD, 0x0F, 0x4C, 0xC1, 0x69, 0xB3, 0x89, 0x32, 0x39, 0x6D, 0x74, 0x68, 0x73, 0x33, 0x57, 0x63,
	0x70, 0x7B, 0xCC, 0x8C, 0xB8, 0x72, 0x28, 0x9C, 0x37, 0xB6, 0x9E, 0x71, 0xCE, 0x5D, 0x34, 0x3B
};

DWORD __declspec(naked) HvxExpansionInstall(QWORD addr, DWORD size) {
	__asm {
		li      r0, EXPANSION_INST_SC
		sc
		blr
	}
}

QWORD __declspec(naked) HvxExpansionCall(DWORD sig, QWORD Arg1, QWORD Arg2, QWORD Arg3, QWORD Arg4) {
	__asm {
		li      r0, EXPANSION_CALL_SC
		sc
		blr
	}
}

BYTE HvPeekBYTE(QWORD Address) {
	return (BYTE)HvxExpansionCall(EXPANSION_SIG, PeekBYTE, Address, 0, 0);
}

WORD HvPeekWORD(QWORD Address) {
	return (WORD)HvxExpansionCall(EXPANSION_SIG, PeekWORD, Address, 0, 0);
}

DWORD HvPeekDWORD(QWORD Address) {
	return (DWORD)HvxExpansionCall(EXPANSION_SIG, PeekDWORD, Address, 0, 0);
}

QWORD HvPeekQWORD(QWORD Address) {
	return HvxExpansionCall(EXPANSION_SIG, PeekQWORD, Address, 0, 0);
}

NTSTATUS HvPeekBytes(QWORD Address, PVOID Buffer, DWORD Size) {
	NTSTATUS result = STATUS_MEMORY_NOT_ALLOCATED;
	VOID* data = XPhysicalAlloc(Size, MAXULONG_PTR, 0, PAGE_READWRITE);
	if (data != NULL)
	{
		QWORD daddr = (QWORD)((DWORD)MmGetPhysicalAddress(data) & 0xFFFFFFFF);
		ZeroMemory(data, Size);
		result = (NTSTATUS)HvxExpansionCall(EXPANSION_SIG, PeekBytes, Address, daddr, Size);
		if (NT_SUCCESS(result))
			memcpy(Buffer, data, Size);
		XPhysicalFree(data);
	}
	else
		RGLPrint("ERROR", "Allocating HvPeekBytes buffer failed!");
	return result;
}

NTSTATUS HvPokeBYTE(QWORD Address, BYTE Value) {
	return (NTSTATUS)HvxExpansionCall(EXPANSION_SIG, PokeBYTE, Address, Value, 0);
}

NTSTATUS HvPokeWORD(QWORD Address, WORD Value) {
	return (NTSTATUS)HvxExpansionCall(EXPANSION_SIG, PokeWORD, Address, Value, 0);
}

NTSTATUS HvPokeDWORD(QWORD Address, DWORD Value) {
	return (NTSTATUS)HvxExpansionCall(EXPANSION_SIG, PokeDWORD, Address, Value, 0);
}

NTSTATUS HvPokeQWORD(QWORD Address, QWORD Value) {
	return (NTSTATUS)HvxExpansionCall(EXPANSION_SIG, PokeQWORD, Address, Value, 0);
}

NTSTATUS HvPokeBytes(QWORD Address, const void* Buffer, DWORD Size) {
	NTSTATUS result = STATUS_MEMORY_NOT_ALLOCATED;
	VOID* data = XPhysicalAlloc(Size, MAXULONG_PTR, 0, PAGE_READWRITE);
	if (data != NULL)
	{
		QWORD daddr = (QWORD)((DWORD)MmGetPhysicalAddress(data) & 0xFFFFFFFF);
		memcpy(data, Buffer, Size);
		result = (NTSTATUS)HvxExpansionCall(EXPANSION_SIG, PokeBytes, Address, daddr, Size);
		XPhysicalFree(data);
	}
	else
		RGLPrint("ERROR", "Allocating HvPokeBytes buffer failed!");
	return result;
}

QWORD HvReadFuseRow(int row) {
	if (row < 12)
	{
		QWORD addr = 0x8000020000020000ULL | (row * 0x200);
		return HvPeekQWORD(addr);
	}
	return 0;
}

DWORD InstallExpansion() {
	BYTE* allocData = (BYTE*)XPhysicalAlloc(0x1000, MAXULONG_PTR, 0, PAGE_READWRITE);
	memset(allocData, 0, 0x1000);
	memcpy(allocData, ExpansionData, sizeof(ExpansionData));
	QWORD addr = (QWORD)MmGetPhysicalAddress(allocData);
	DWORD ret = HvxExpansionInstall(addr, 0x1000);
	XPhysicalFree(allocData);
	return ret;
}

BOOL DisableExpansionInstalls() {
	// disable expansion installs by unpatching HvxExpansionInstall
	BYTE _30BAC_orig[] = { 0x41, 0x9A, 0xFF, 0xB8 };  // beq cr6, LAB_00030b64
	BYTE _li_r3_0_blr[] = { 0x38, 0x60, 0x00, 0x00, 0x4E, 0x80, 0x00, 0x20 };  // li r3, 0; blr;
	if (NT_SUCCESS(HvPokeBytes(0x600030BAC, _30BAC_orig, 4)) &&
		NT_SUCCESS(HvPokeBytes(0x600030A98, _li_r3_0_blr, 8)))
		// NT_SUCCESS(HvPokeBytes(0x200016320, ExpPubKey, sizeof(ExpPubKey))))
	{
		/* DWORD ret = InstallExpansion();
		if (ret != ERROR_SUCCESS)  // invalid signing key, that's what we want.
			return TRUE; */
		return TRUE;
	}
	return FALSE;
}

BOOL DisableShadowbooting() {
	// disable shadowbooting by making HvxShadowboot fall through to MachineCheck
	BYTE nopCode[] = { 0x60, 0x00, 0x00, 0x00 };  // nop
	if (NT_SUCCESS(HvPokeBytes(0x60003206C, nopCode, 4)))
		return TRUE;
	return FALSE;
}

BOOL LaunchXELL(LPCSTR path) {
	DWORD fileSize = FileSize(path);
	if (fileSize == -1) {
		RGLPrint("ERROR", "Invalid XELL path\n");
		return FALSE;
	}
	PBYTE data = (PBYTE)XPhysicalAlloc(fileSize, MAXULONG_PTR, 0, MEM_LARGE_PAGES | PAGE_READWRITE | PAGE_NOCACHE);
	memset(data, 0, fileSize);
	if (!ReadFile(path, data, fileSize)) {
		return FALSE;
	}

	UINT64 len = 0ULL + (((fileSize + 3) / 4) & 0xFFFFFFFF);
	UINT64 src = 0x8000000000000000ULL;
	src = src + ((DWORD)MmGetPhysicalAddress(data));
	HvxExpansionCall(EXPANSION_SIG, HvExecute, 0x800000001C000000ULL, src, len);

	return TRUE;
}

BOOL LoadApplyHV(const char* filepath) {
	DWORD fileSize = FileSize(filepath);
	if (fileSize == -1) {
		RGLPrint("ERROR", "Invalid HV patch path\n");
		return FALSE;
	}
	if (fileSize % 4 != 0) {
		RGLPrint("ERROR", "Invalid HV patch size\n");
		return FALSE;
	}
	BYTE* patchData = (BYTE*)XPhysicalAlloc(fileSize, MAXULONG_PTR, 0, PAGE_READWRITE);
	if (!ReadFile(filepath, patchData, fileSize)) {
		RGLPrint("ERROR", "Unable to read HV patch file\n");
		XPhysicalFree(patchData);
		return FALSE;
	}

	BYTE* saveAddr = patchData;
	for(;;)
	{
		UINT64 addr = *(UINT32*)patchData;
		if (addr == 0xFFFFFFFF)
			break;
		addr |= 0x8000000000000000ULL;
		DWORD size = *(DWORD*)(patchData + 0x4);
		BYTE* data = (BYTE*)XPhysicalAlloc(size * 4, MAXULONG_PTR, 0, PAGE_READWRITE);
		memcpy(data, patchData + 0x8, size*4);
		HvPokeBytes(addr, data, size * 4);
		XPhysicalFree(data);
		patchData += (size * 4) + 8;
	}

	// cleanup
	XPhysicalFree(saveAddr);

	return TRUE;
}

BOOL LoadKeyVault(const char* filepath) {
	DWORD fileSize = FileSize(filepath);
	if (fileSize == -1) {
		RGLPrint("ERROR", "Invalid KV path\n");
		return FALSE;
	}
	if (fileSize != 0x4000) {
		RGLPrint("ERROR", "Invalid KV size\n");
		return FALSE;
	}
	BYTE* kvData = (BYTE*)XPhysicalAlloc(fileSize, MAXULONG_PTR, 0, PAGE_READWRITE);
	if (!ReadFile(filepath, kvData, fileSize)) {
		RGLPrint("ERROR", "Unable to read KV file\n");
		XPhysicalFree(kvData);
		return FALSE;
	}

	// UPDATE THIS FOR NEW RELEASES
	// copy the console certificate to ???
	UINT32 unkData = *(UINT32*)(0x81D205C8);
	if (unkData != 0)
	{
		//unkData += 0x313C;
		memcpy((void*)(unkData + 0x313C), kvData + 0x9C8, 0x1A8);
	}
	
	// 17489 - 162E0
	QWORD kvAddr = HvPeekQWORD(0x2000162E0);
	HvPeekBytes(kvAddr + 0xF0, kvData + 0xF0, 0x10);    // abRoamableObfKey
	HvPeekBytes(kvAddr + 0x100, kvData + 0x100, 0x10);  // abDvdKey
	HvPokeBytes(kvAddr, kvData, 0x4000);

	// cleanup
	XPhysicalFree(kvData);

	return TRUE;
}

