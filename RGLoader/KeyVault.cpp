#include "stdafx.h"

BYTE KeyVaultProtectionKey[] = {
    0x00, 0x00, 0x00, 0x20, 0x00, 0x01, 0x00, 0x01, 0x07, 0xD1, 0xD9, 0xB2, 0xE6, 0x10, 0x3A, 0x9F,
    0x90, 0xA9, 0xB2, 0xD0, 0x73, 0xBC, 0x61, 0x5F, 0xFC, 0xEA, 0x06, 0x94, 0x32, 0xF8, 0x6D, 0xAD,
    0x55, 0x9A, 0x20, 0x31, 0x6A, 0xDD, 0x32, 0xE9, 0x68, 0x51, 0x14, 0x1F, 0x25, 0x3F, 0x36, 0x81,
    0x1A, 0x70, 0xCD, 0xBD, 0x49, 0x14, 0x21, 0x48, 0x6C, 0x18, 0x6E, 0x5F, 0x93, 0x03, 0xF4, 0x9E,
    0x6F, 0xC1, 0x9B, 0x2F, 0xEF, 0x37, 0xA1, 0x2E, 0x59, 0xD3, 0xAD, 0x8B, 0x82, 0x6F, 0xD0, 0x17,
    0xD0, 0xE6, 0xC4, 0x20, 0x5E, 0x7F, 0x57, 0x56, 0x50, 0x89, 0xA7, 0xAC, 0x75, 0x1A, 0x20, 0xE9,
    0xA1, 0x3A, 0xCA, 0xEA, 0x8A, 0xCD, 0x10, 0x08, 0x78, 0xDC, 0x4A, 0xA1, 0xCF, 0x0D, 0x10, 0x72,
    0x8F, 0x2B, 0xAA, 0xC5, 0xE8, 0x9E, 0xFC, 0xC4, 0x64, 0x27, 0xCB, 0x91, 0x0A, 0x52, 0x3C, 0xF9,
    0xC6, 0x24, 0x45, 0x5E, 0xEA, 0x78, 0xDF, 0xF0, 0x23, 0x57, 0x80, 0x29, 0x19, 0xEF, 0x33, 0xA4,
    0x7B, 0x0B, 0xD4, 0xD1, 0x2D, 0xFB, 0xCA, 0x47, 0x71, 0xE2, 0xA8, 0x9B, 0x3B, 0xB8, 0x6E, 0x39,
    0x33, 0x8E, 0x9D, 0xEA, 0xC6, 0x5B, 0x8D, 0x0D, 0xC1, 0xBD, 0x46, 0x8D, 0xE3, 0xE2, 0xA7, 0xD1,
    0x0D, 0x37, 0x7D, 0x6C, 0x5B, 0xC9, 0xD6, 0x2D, 0x0F, 0xAC, 0xE4, 0x0F, 0xDC, 0x53, 0x62, 0xA5,
    0xE1, 0x85, 0xE9, 0x9F, 0x27, 0xF5, 0x7F, 0x0D, 0x41, 0x6A, 0x5F, 0xF1, 0xDB, 0x82, 0x97, 0xA4,
    0x7B, 0x74, 0x41, 0xFD, 0xD2, 0x10, 0xEE, 0x51, 0x20, 0x36, 0x45, 0x56, 0xCF, 0xB1, 0xE9, 0xB5,
    0xAE, 0xE0, 0x09, 0x58, 0xDD, 0x29, 0xB8, 0xEB, 0x2D, 0x2C, 0x75, 0xA3, 0x3A, 0xCF, 0xBB, 0xAA,
    0x4A, 0x87, 0x77, 0x3A, 0xB0, 0x53, 0xB8, 0xBE, 0x55, 0xE3, 0xEE, 0x56, 0x32, 0x2C, 0xF4, 0x9B,
    0xCC, 0xD7, 0x3F, 0x99, 0xEB, 0xDE, 0x5E, 0xF5, 0x98, 0x25, 0xCF, 0x3C, 0x81, 0x5A, 0xB0, 0xD8,
    0x86, 0xBA, 0x3D, 0xAD, 0x89, 0xED, 0xB3, 0xD9, 0x45, 0x39, 0x3B, 0x4F, 0xBC, 0xBB, 0x5D, 0x13,
    0x1B, 0xB0, 0x6F, 0x1A, 0xD9, 0x21, 0x22, 0x3D, 0x5C, 0xA3, 0xFD, 0x0F, 0x57, 0xBD, 0x0B, 0x9F,
    0x03, 0xD7, 0xE2, 0xB9, 0x66, 0x68, 0x51, 0xD4, 0x27, 0xB6, 0x48, 0x1C, 0x98, 0x7A, 0x1F, 0xE7,
    0xB1, 0x14, 0x0D, 0x93, 0x5B, 0x22, 0xB9, 0x98, 0x83, 0xBD, 0xEB, 0x9C, 0xAF, 0xD6, 0xDA, 0xC6,
    0x65, 0xE1, 0xED, 0xA2, 0xC0, 0xC8, 0x34, 0x75, 0x0B, 0x65, 0x92, 0xD3, 0xB3, 0x08, 0x35, 0x1D,
    0xA4, 0xDF, 0x3D, 0xEE, 0x37, 0x34, 0xA2, 0x21, 0x18, 0x81, 0x4A, 0xF7, 0xFB, 0x00, 0xFB, 0x1A,
    0xDA, 0xC5, 0xC9, 0x49, 0x06, 0xF1, 0xE6, 0x6C, 0x18, 0x42, 0x9D, 0x0E, 0x5F, 0xBC, 0x6C, 0x6C,
    0x22, 0xE2, 0xEC, 0x38, 0xFB, 0x6D, 0xC3, 0x5F, 0xC7, 0xE9, 0xD8, 0x17, 0xF4, 0x27, 0xFA, 0xB5,
    0xFA, 0xA7, 0x25, 0x39, 0x04, 0x68, 0xD3, 0xF7, 0xC6, 0xE3, 0x03, 0xEA, 0x6E, 0x1E, 0x6C, 0x56,
    0x0D, 0x64, 0x9F, 0x31, 0xA2, 0x49, 0x0C, 0xE2, 0x82, 0x40, 0x3D, 0x97, 0xB6, 0x30, 0x17, 0x1D,
    0xCD, 0x2E, 0xB8, 0x2A, 0x2A, 0x20, 0x0C, 0x9A, 0x99, 0x83, 0x55, 0x6E, 0x35, 0x7D, 0xBE, 0x19,
    0x47, 0x08, 0xE1, 0x5A, 0xC1, 0x40, 0x00, 0x3F, 0x84, 0x4E, 0xE6, 0xE3, 0xA6, 0x57, 0x04, 0x61,
    0xAD, 0xAC, 0x40, 0x6F, 0x84, 0x34, 0xAA, 0x5B, 0x92, 0x69, 0x38, 0xCB, 0xF3, 0xE1, 0x08, 0x82,
    0xA4, 0x61, 0xC5, 0xA0, 0x74, 0x80, 0xA4, 0x18, 0x8A, 0xB9, 0xE8, 0x8A, 0xE6, 0x52, 0xDA, 0x7F,
    0xF6, 0x7E, 0x6A, 0xE1, 0x66, 0xA8, 0x0A, 0x3A, 0xB0, 0x19, 0xE4, 0xBB, 0xAC, 0x53, 0x35, 0x72,
    0x72, 0xD9, 0x24, 0x8A, 0x85, 0x2A, 0x77, 0x11, 0xC2, 0xD5, 0x56, 0xF7, 0x25, 0x5E, 0xA4, 0x60,
    0xCC, 0xCA, 0x8A, 0x8F, 0x61, 0xF2, 0xE5, 0xE1, 0x06, 0x81, 0xCA, 0x95, 0x2E, 0xB0, 0x02, 0xD7,
    0x5F, 0x9E, 0x22, 0x16, 0x55, 0xDE, 0x4F, 0xC8, 0xDD, 0x42, 0xD8, 0x0C, 0x09, 0xB8, 0xF6, 0xE3,
    0xD6, 0xB1, 0x45, 0x2E, 0x78, 0xA1, 0x62, 0x72, 0x04, 0x36, 0xEC, 0xE3, 0x77, 0xE3, 0x20, 0x4A,
    0x21, 0x89, 0xEC, 0x29, 0x4E, 0x94, 0xCA, 0x3A, 0x65, 0x67, 0xD7, 0xB9, 0x2B, 0x08, 0x86, 0xAC,
    0x09, 0xCC, 0xE8, 0x55, 0x14, 0xEE, 0x4F, 0x9D, 0x19, 0xC7, 0x95, 0x24, 0xE4, 0xA0, 0x05, 0x25,
    0xDD, 0x61, 0xB5, 0xD2, 0x4E, 0xE1, 0x98, 0x11, 0xE5, 0x74, 0x25, 0x9C, 0x19, 0x0E, 0xF8, 0xB8,
    0x6D, 0xA3, 0xEB, 0x63, 0x1B, 0x10, 0x3F, 0xDA, 0x4C, 0xB4, 0x54, 0xDA, 0xB8, 0x31, 0xB2, 0x08,
    0x35, 0x56, 0xB7, 0xC3, 0xAF, 0x80, 0x8B, 0xA1, 0x44, 0x4A, 0xCA, 0x1B, 0x44, 0xB8, 0xF3, 0x98,
    0x41, 0x3A, 0xB0, 0xE3, 0x9B, 0x0F, 0x59, 0xA9, 0xDF, 0x3A, 0xE4, 0x7F, 0x29, 0x12, 0xB0, 0x72,
    0x12, 0x09, 0x6E, 0xB0, 0x78, 0x7F, 0x44, 0x55, 0x5B, 0x45, 0xB3, 0xF6, 0xE1, 0xCA, 0x34, 0x8D,
    0x8A, 0xE0, 0xC0, 0x88, 0x02, 0xF2, 0x1E, 0x3D, 0x8F, 0x7D, 0xDC, 0xA2, 0xCC, 0x4C, 0x70, 0x6B,
    0xCE, 0x4E, 0x05, 0xB4, 0xD9, 0x3A, 0xF1, 0xCD, 0x8A, 0xC1, 0xF2, 0x66, 0x67, 0x0C, 0x23, 0xED,
    0x1B, 0xF0, 0x78, 0xFD, 0x70, 0xB4, 0x8A, 0x43, 0xB2, 0x21, 0x98, 0x12, 0xCE, 0x1E, 0x3D, 0xC1,
    0x3E, 0xF4, 0x44, 0x35, 0x5C, 0xDF, 0x07, 0x12, 0x52, 0xF4, 0xE1, 0x80, 0x11, 0xA4, 0xEA, 0xCB,
    0x1A, 0xEA, 0x74, 0xE8, 0x87, 0x8D, 0xD9, 0x30, 0xED, 0x68, 0xC9, 0x09, 0xBF, 0xD5, 0xB0, 0xC4,
    0x51, 0x3C, 0x70, 0x82, 0x85, 0xA4, 0x54, 0x1F, 0x1A, 0x0D, 0xE5, 0x7F, 0x4F, 0x64, 0x04, 0x9F,
    0x74, 0xEE, 0xAC, 0x48, 0xDF, 0x55, 0x1A, 0xA3, 0x56, 0xED, 0x4F, 0x5F, 0xDB, 0x79, 0xBA, 0x29,
    0x22, 0xB2, 0x3E, 0xEA, 0xE2, 0x63, 0x3B, 0x5E, 0x6F, 0x48, 0xC4, 0x6A, 0xB0, 0x21, 0x19, 0xA2,
    0xB7, 0x08, 0x36, 0xEE, 0xD2, 0xC5, 0x53, 0x7F, 0x9C, 0x60, 0xEA, 0x95, 0x7F, 0x4A, 0x19, 0x75,
    0x7A, 0xAE, 0x84, 0x96, 0xC3, 0x11, 0x1C, 0xA4, 0x28, 0x9A, 0x70, 0xCE, 0x27, 0xF6, 0xCF, 0x1B,
    0xCA, 0xDE, 0x43, 0x21, 0x57, 0xF3, 0x48, 0xCC, 0x98, 0x68, 0x41, 0xD4, 0x17, 0x1B, 0xFA, 0x69,
    0x60, 0x5C, 0xBE, 0x45, 0x98, 0x46, 0xC2, 0xD8, 0x88, 0xC4, 0x9C, 0x39, 0xE8, 0xB9, 0xD4, 0xEA,
    0x00, 0xB1, 0x3F, 0x7C, 0xED, 0xE5, 0x32, 0x4C, 0xE9, 0x2F, 0x81, 0x75, 0x49, 0x2F, 0x83, 0x53,
    0xE9, 0xE9, 0x30, 0x5E, 0x37, 0x93, 0x18, 0x9F, 0x48, 0xC4, 0xF3, 0xA2, 0xF6, 0xA5, 0x35, 0x68
};

BOOL ProtectKeyVault(PBYTE pbData, DWORD dwSize, PBYTE pbOut, PDWORD pdwOut) {
    if (dwSize % 8 != 0)
        return FALSE;

    // create header
    KeyVaultProtectHeader hdr;
    hdr.dwMagic = PROTECTED_KEYVAULT_MAGIC;

    // generate AES key and IV
    // 128-bit AES key and IV for AES-128 in CBC mode
    XeCryptRandom(hdr.pbKey, sizeof(hdr.pbKey));
    XeCryptRandom(hdr.pbIV, sizeof(hdr.pbIV));

    // hash KV data with HMAC SHA
    XeCryptHmacSha(hdr.pbKey, sizeof(hdr.pbKey), pbData, dwSize, NULL, 0, NULL, 0, hdr.pbHash, sizeof(hdr.pbHash));

    PXECRYPT_RSAPRV_2048 pRsaKey = (PXECRYPT_RSAPRV_2048)KeyVaultProtectionKey;

    // create and clear buffer for AES key material
    PQWORD pqEncKeyData = (PQWORD)malloc(pRsaKey->RsaPub.Rsa.cqw * 8);
    memset(pqEncKeyData, 0, pRsaKey->RsaPub.Rsa.cqw * 8);

    // copy key material into the RSA encrypted key buffer
    PBYTE pbEncKeyData = (PBYTE)pqEncKeyData;
    memcpy(pbEncKeyData, (PBYTE)&hdr, sizeof(hdr));

    // encrypt the AES key material
    XeCryptBnQwNeRsaPubCrypt(pqEncKeyData, pqEncKeyData, (PXECRYPT_RSA)pRsaKey);

    // create and copy buffer for holding the RSA encrypted AES key material and the AES encrypted KV
    PBYTE pbEncKeyVaultData = (PBYTE)malloc((pRsaKey->RsaPub.Rsa.cqw * 8) + dwSize);
    memcpy(pbEncKeyVaultData, (PBYTE)pqEncKeyData, pRsaKey->RsaPub.Rsa.cqw * 8);

    // free RSA encrypted key buffer since it's not used after copying
    free(pqEncKeyData);

    // encrypt KV with AES key material
    XECRYPT_AES_STATE aesState;
    XeCryptAesKey(&aesState, hdr.pbKey);
    XeCryptAesCbc(&aesState, pbData, dwSize, pbEncKeyVaultData + (pRsaKey->RsaPub.Rsa.cqw * 8), hdr.pbIV, TRUE);

    // copy to the output
    memcpy(pbOut, pbEncKeyVaultData, (pRsaKey->RsaPub.Rsa.cqw * 8) + dwSize);
    *pdwOut = (pRsaKey->RsaPub.Rsa.cqw * 8) + dwSize;

    // free the encrypted KV data since it's now in the output buffer
    free(pbEncKeyVaultData);

    return TRUE;
}